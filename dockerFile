FROM node:16.0.0

WORKDIR /app

COPY package*.json .

RUN npm install

COPY . .

ENV PORT = 3000

CMD ["npm", "start"]

# // vinit dockerfile for nodejs
# // also specify the version number after the colon while building the docker image
# // docker build -t vinit/technetic-app:latest .
# // docker run -p 3000:3000 client:latest

# // there can be situations where you want to share data across
# // multiple containers. In this case you can use volumes.

# command to create a volume:
# // docker volume create --name=technetic-app-data
# // volume is directory (folder) on the host machine that is shared between containers
# // volume is used to persist data across containers
# // inside the volume directory a container can create file that can be
# // remounted to the container into future containers or multiple containers at the same time

# // debugging in docker 
# // it's easy to check the logs of your container in docker desktop
# // docker logs -f <container-id>


# // pro tip:

# one of the best thing we can do to keep our containers healthy is that write simple
# maintainable micro services in which each container should run only one task (proccess).
# in short multiple containers for multiple processes

# docker has spacific tool designed to do that called docker-compose
# it's just a tool to run multiple containers at the same time 
# docker-compose is a command line tool that helps you to manage your docker containers.

# docker-compose proccedures:

# 1. create a docker-compose.yml file : to create a docker-compose.yml file you need to run the command:
# 2. run docker-compose up : to run the docker-compose file you need to run the command:
# 3. run docker-compose down : to terminate the docker-compose file you need to run the command:
# 4. run docker-compose logs : to check the logs of the docker-compose file you need to run the command:
# 5. run docker-compose ps : to check the status of the docker-compose file you need to run the command:
# 6. run docker-compose stop : to stop the docker-compose file you need to run the command:
# 7. run docker-compose rm : to remove the docker-compose file you need to run the command:
# 8. run docker-compose restart : to restart the docker-compose file you need to run the command:
# 9. run docker-compose scale : to scale the docker-compose file you need to run the command:
# 10. run docker-compose up -d : to run the docker-compose file in the background you need to run the command:
